import { mkdir, writeFile } from 'node:fs/promises';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import type {
  ComponentClassNameMap,
  ComponentClassNameMapSplit
} from '../phase-5-generate-class-names-map/generateClassNamesMap';

/**
 * Phase 6 - Persist build artifacts generated by previous phases
 * - Writes CSS to build/kiskadee.css
 * - Writes classNamesMap to build/classNamesMap.json
 */
export async function persistBuildArtifacts(
  cssGenerated:
    | string
    | {
        coreCss: string;
        palettes: Record<string, string>;
      },
  classNamesMap: ComponentClassNameMap | ComponentClassNameMapSplit,
  outDirName?: string
): Promise<void> {
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);

  // Ensure build dir exists
  const baseBuildDir = resolve(__dirname, '..', '..', 'build');
  const buildDir = outDirName ? resolve(baseBuildDir, outDirName) : baseBuildDir;
  await mkdir(buildDir, { recursive: true });

  // Persist CSS (core and optional palettes)
  if (typeof cssGenerated === 'string') {
    const outCssFile = resolve(buildDir, 'kiskadee.css');
    await writeFile(outCssFile, cssGenerated, 'utf8');
    console.log(`[web-builder] CSS written to: ${outCssFile}`);
  } else {
    const outCssFile = resolve(buildDir, 'kiskadee.css');
    await writeFile(outCssFile, cssGenerated.coreCss, 'utf8');
    console.log(`[web-builder] Core CSS written to: ${outCssFile}`);

    // Write palette CSS files as p1.css, p2.css, ...
    for (const paletteName in cssGenerated.palettes) {
      const paletteCss = cssGenerated.palettes[paletteName];
      const paletteFile = resolve(buildDir, `${paletteName}.css`);
      await writeFile(paletteFile, paletteCss, 'utf8');
      console.log(`[web-builder] Palette CSS written to: ${paletteFile}`);
    }
  }

  // Persist classNamesMap as JSON (core + optional per-palette files)
  const maybeSplit = classNamesMap as ComponentClassNameMapSplit;
  if (maybeSplit && 'core' in maybeSplit && 'palettes' in maybeSplit) {
    const coreOut = resolve(buildDir, 'classNamesMap.json');
    await writeFile(coreOut, JSON.stringify(maybeSplit.core, null, 2), 'utf8');
    console.log(`[web-builder] ClassNames core map written to: ${coreOut}`);

    for (const paletteName in maybeSplit.palettes) {
      const pOut = resolve(buildDir, `classNamesMap.${paletteName}.json`);
      await writeFile(pOut, JSON.stringify(maybeSplit.palettes[paletteName], null, 2), 'utf8');
      console.log(`[web-builder] ClassNames palette map written to: ${pOut}`);
    }
  } else {
    const classNamesOutFileJson = resolve(buildDir, 'classNamesMap.json');
    const classNamesJson = JSON.stringify(classNamesMap as ComponentClassNameMap, null, 2);
    await writeFile(classNamesOutFileJson, classNamesJson, 'utf8');
    console.log(`[web-builder] ClassNames map written to: ${classNamesOutFileJson}`);
  }
}
